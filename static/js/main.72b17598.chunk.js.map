{"version":3,"sources":["pages/const.js","pages/Home.js","configuration/spa.js","utils/index.js","pages/Checkout.js","pages/Summary.js","pages/Cancel.js","pages/Thankyou.js","App.js","serviceWorker.js","index.js"],"names":["BASEURL","window","location","hostname","Home","src","width","alt","Button","variant","to","attributes","local","configuration","baseURL","clientId","country","language","translation","resource","confirm","paymentMethodsConfiguration","code","style","size","color","shape","label","createTransactionDetails","requestData","transactionId","Date","getTime","providerRequest","payment","amount","currency","reference","longReference","essential","products","name","customFunctions","integration","getAttributes","urlParams","URLSearchParams","search","env","get","getQueryStringFromObject","parameters","reduce","acc","current","encodeURIComponent","value","slice","Checkout","history","useHistory","onProceed","step","preset","dispatch","redirect","push","onAbort","onCustomerAbort","mode","longId","Summary","withRouter","Thankyou","App","align","path","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72b17598.chunk.js","sourcesContent":["let BASEURL =\r\n  window.location.hostname === \"localhost\"\r\n    ? \"\"\r\n    : \"/demo-express-checkout-react-spa\";\r\nexport default BASEURL;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport BASEURL from \"./const\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <h2>My Single Page Shop</h2>\r\n      <img src=\"assets/demoshopusb.jpg\" width=\"300\" alt=\"Ledger Nano S\"></img>\r\n      <h2>Ledger Nano S: 20€</h2>\r\n      <Button variant=\"contained\">\r\n        <Link to={BASEURL + \"/checkout\"}>\r\n          <strong>Go To Checkout Page</strong>\r\n        </Link>\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n","export const getRedirectUrl = (url, parameters) => {\r\n  const queryString = parameters.reduce(\r\n    (acc, current) =>\r\n      `${acc}${encodeURIComponent(current.name)}=${encodeURIComponent(\r\n        current.value\r\n      )}&`,\r\n    \"\"\r\n  );\r\n  return `${url}${url.includes(\"?\") ? \"&\" : \"?\"}${queryString.slice(0, -1)}`;\r\n};\r\nconst attributes = {\r\n  local: {\r\n    configuration: {\r\n      baseURL: \"https://api.integration.oscato.com/pci/v1/express\",\r\n      clientId: \"v1.opt-div-app.5a3eb96a10b94efb9d19f2ff7137e7e5\",\r\n      country: \"DE\",\r\n      language: \"de_DE\",\r\n      translation: [\r\n        {\r\n          language: \"en\",\r\n          resource: {\r\n            confirm: \"confirm\"\r\n          }\r\n        },\r\n        {\r\n          language: \"de\",\r\n          resource: {\r\n            confirm: \"bestätigen\"\r\n          }\r\n        }\r\n      ],\r\n      paymentMethodsConfiguration: [\r\n        {\r\n          code: \"PAYPAL\",\r\n          style: {\r\n            size: \"small\",\r\n            color: \"gold\",\r\n            shape: \"rect\",\r\n            label: \"checkout\"\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    createTransactionDetails: function(requestData) {\r\n      return {\r\n        transactionId: \"tr-\" + new Date().getTime(),\r\n        country: \"DE\",\r\n        providerRequest: requestData,\r\n        payment: {\r\n          amount: 20,\r\n          currency: \"EUR\",\r\n          reference: \"Payment #1\",\r\n          longReference: {\r\n            essential: \"Thank you for your purchase!\"\r\n          }\r\n        },\r\n        products: [\r\n          {\r\n            name: \"Ledger Nano S\",\r\n            amount: 20\r\n          }\r\n        ]\r\n      };\r\n    },\r\n    customFunctions: {}\r\n  },\r\n  integration: {\r\n    configuration: {\r\n      baseURL: \"https://api.integration.oscato.com/pci/v1/express\",\r\n      clientId: \"v1.opt-div-app.51d30325cb0d4b5bb9cce2e7e6b15b1f\",\r\n      country: \"DE\",\r\n      language: \"de_DE\",\r\n      translation: [\r\n        {\r\n          language: \"en\",\r\n          resource: {\r\n            confirm: \"confirm\"\r\n          }\r\n        },\r\n        {\r\n          language: \"de\",\r\n          resource: {\r\n            confirm: \"bestätigen\"\r\n          }\r\n        }\r\n      ],\r\n      paymentMethodsConfiguration: [\r\n        {\r\n          code: \"PAYPAL\",\r\n          style: {\r\n            size: \"small\",\r\n            color: \"gold\",\r\n            shape: \"rect\",\r\n            label: \"checkout\"\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    createTransactionDetails: function(requestData) {\r\n      return {\r\n        transactionId: \"tr-\" + new Date().getTime(),\r\n        country: \"DE\",\r\n        providerRequest: requestData,\r\n        payment: {\r\n          amount: 20,\r\n          currency: \"EUR\",\r\n          reference: \"Payment #1\",\r\n          longReference: {\r\n            essential: \"Thank you for your purchase!\"\r\n          }\r\n        },\r\n        products: [\r\n          {\r\n            name: \"Ledger Nano S\",\r\n            amount: 20\r\n          }\r\n        ]\r\n      };\r\n    },\r\n    customFunctions: {}\r\n  }\r\n};\r\nfunction getEnv(queryStringEnv) {\r\n  if (queryStringEnv) {\r\n    return queryStringEnv;\r\n  }\r\n  if (window.location.hostname === \"localhost\") {\r\n    return \"local\";\r\n  }\r\n  return \"integration\";\r\n}\r\n\r\nexport default function getAttributes() {\r\n  var urlParams = new URLSearchParams(window.location.search);\r\n  var env = getEnv(urlParams.get(\"env\"));\r\n\r\n  return attributes[env] || null;\r\n}\r\n","export const getQueryStringFromObject = parameters => {\r\n    const queryString = parameters.reduce(\r\n      (acc, current) =>\r\n        `${acc}${encodeURIComponent(current.name)}=${encodeURIComponent(\r\n          current.value\r\n        )}&`,\r\n      \"\"\r\n    );\r\n    return queryString.slice(0, -1);\r\n  };\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ExpressCheckout from \"express-checkout\";\r\nimport BASEURL from \"./const\";\r\nimport getAttributes from \"../configuration/spa\";\r\nimport { getQueryStringFromObject } from \"../utils\";\r\n\r\nfunction Checkout() {\r\n  let history = useHistory();\r\n  const attributes = getAttributes();\r\n\r\n  const onProceed = ({ step, dispatch, preset }) => {\r\n    if (step === \"update\") {\r\n      const { parameters } = preset.redirect;\r\n      history.push(\r\n        BASEURL + \"/summary?\" + getQueryStringFromObject(parameters)\r\n      );\r\n    }\r\n    if (step === \"cancel\") {\r\n      const { parameters } = preset.redirect;\r\n      history.push(\r\n        BASEURL + \"/checkout?\" + getQueryStringFromObject(parameters)\r\n      );\r\n    }\r\n  };\r\n  const onAbort = ({ step, dispatch, preset }) => {\r\n    const { parameters } = preset.redirect;\r\n    history.push(BASEURL + \"/checkout?\" + getQueryStringFromObject(parameters));\r\n  };\r\n\r\n  // this is used when you click to close the pop up\r\n  const onCustomerAbort = ({ step, dispatch, preset }) => {\r\n    const { parameters } = preset.redirect;\r\n    history.push(BASEURL + \"/checkout?\" + getQueryStringFromObject(parameters));\r\n  };\r\n\r\n  return (\r\n    <ExpressCheckout\r\n      configuration={attributes.configuration}\r\n      createTransactionDetails={attributes.createTransactionDetails}\r\n      customFunctions={{ onProceed, onAbort, onCustomerAbort }}\r\n      mode={null}\r\n      longId={null}\r\n    />\r\n  );\r\n}\r\nexport default Checkout;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ExpressCheckout from \"express-checkout\";\r\nimport BASEURL from \"./const\";\r\nimport getAttributes from \"../configuration/spa\";\r\nimport { getQueryStringFromObject } from \"../utils\";\r\n\r\nconst getLongId = () => {\r\n  let params = new URLSearchParams(window.location.search);\r\n\r\n  return params.get(\"longId\");\r\n};\r\nfunction Summary() {\r\n  let history = useHistory();\r\n  const attributes = getAttributes();\r\n\r\n  const onProceed = ({ step, dispatch, preset }) => {\r\n    if (step === \"confirm\") {\r\n      const { parameters } = preset.redirect;\r\n      history.push(BASEURL + \"/thankyou?\" + getQueryStringFromObject(parameters));\r\n    }\r\n  };\r\n  const onAbort = ({ step, dispatch, preset }) => {\r\n    if (step === \"confirm\") {\r\n      const { parameters } = preset.redirect;\r\n      history.push(BASEURL + \"/cancel?\" + getQueryStringFromObject(parameters));\r\n    }\r\n  };\r\n  const longId = getLongId();\r\n\r\n  return (\r\n    <ExpressCheckout\r\n      {...attributes}\r\n      mode=\"Summary\"\r\n      longId={longId}\r\n      customFunctions={{ onProceed, onAbort }}\r\n    />\r\n  );\r\n}\r\nexport default Summary;\r\n","import React from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nfunction Cancel({location}) {\r\n  return <div>Payment failed, please retry again!</div>;\r\n}\r\nexport default withRouter(Cancel);\r\n","import React from \"react\";\r\n\r\nfunction Thankyou() {\r\n  return <div>Payment is successful</div>;\r\n}\r\nexport default Thankyou;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport BASEURL from \"./pages/const\";\r\nimport { Home, Checkout, Summary, Thankyou, Cancel } from \"./pages\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Link to={BASEURL + \"/\"}>Home</Link>\r\n      </div>\r\n      <br />\r\n      <br />\r\n      <div align=\"center\">\r\n        <Switch>\r\n          <Route path={BASEURL + \"/checkout\"}>\r\n            <Checkout />\r\n          </Route>\r\n          <Route path={BASEURL + \"/summary\"}>\r\n            <Summary />\r\n          </Route>\r\n          <Route path={BASEURL + \"/thankyou\"}>\r\n            <Thankyou />\r\n          </Route>\r\n          <Route path={BASEURL + \"/cancel\"}>\r\n            <Cancel />\r\n          </Route>\r\n          <Route path={BASEURL + \"/\"}>\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}