{"version":3,"sources":["pages/const.js","pages/Home.js","configuration/spa.js","server/constants/index.js","utils/index.js","pages/Checkout.js","server/network/index.js","server/getExpressPreset/index.js","pages/Summary.js","pages/Cancel.js","pages/Thankyou.js","server/charge/index.js","App.js","serviceWorker.js","index.js"],"names":["BASEURL","window","location","hostname","Home","src","width","alt","Button","variant","to","attributes","local","configuration","baseURL","clientId","country","language","translation","resource","confirm","paymentMethodsConfiguration","code","style","size","color","shape","label","createTransactionDetails","requestData","transactionId","Date","getTime","providerRequest","payment","amount","currency","reference","longReference","essential","products","name","customFunctions","integration","getAttributes","urlParams","URLSearchParams","search","env","get","MERCHANT","USER","TOKEN","getQueryStringFromObject","parameters","reduce","acc","current","encodeURIComponent","value","slice","getLongId","getAuthorization","btoa","Checkout","history","useHistory","onProceed","step","preset","dispatch","redirect","push","onAbort","onCustomerAbort","mode","longId","fetchData","url","options","a","async","fetch","fetchResult","handleResponse","data","response","ok","error","message","status","statusText","contentType","headers","includes","json","then","Promise","reject","handleJSONResponse","text","handleTextResponse","Error","sendData","method","body","cache","Accept","JSON","stringify","getPresetLink","replace","getExpressPreset","callback","onlyGetExpressPreset","Authorization","address","customerCollectedDetails","addresses","shipping","network","links","charge","Summary","useState","paymentData","setPaymentData","useEffect","className","firstName","lastName","street","city","zip","withRouter","Thankyou","setStatus","link","setLink","getTemplate","App","align","path","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34d45d59.chunk.js","sourcesContent":["let BASEURL =\n  window.location.hostname === \"localhost\"\n    ? \"\"\n    : \"/demo-express-checkout-react-spa\";\nexport default BASEURL;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { Link } from \"react-router-dom\";\nimport BASEURL from \"./const\";\n\nfunction Home() {\n  return (\n    <div>\n      <h2>My Single Page Shop</h2>\n      <img src=\"assets/demoshopusb.jpg\" width=\"300\" alt=\"Ledger Nano S\"></img>\n      <h2>Ledger Nano S: 20â‚¬</h2>\n      <Button variant=\"contained\">\n        <Link to={BASEURL + \"/checkout\"}>\n          <strong>Go To Checkout Page</strong>\n        </Link>\n      </Button>\n    </div>\n  );\n}\nexport default Home;\n","export const getRedirectUrl = (url, parameters) => {\n  const queryString = parameters.reduce(\n    (acc, current) =>\n      `${acc}${encodeURIComponent(current.name)}=${encodeURIComponent(\n        current.value\n      )}&`,\n    \"\"\n  );\n  return `${url}${url.includes(\"?\") ? \"&\" : \"?\"}${queryString.slice(0, -1)}`;\n};\nconst attributes = {\n  local: {\n    configuration: {\n      baseURL: \"https://api.integration.oscato.com/pci/v1/express\",\n      clientId: \"v1.opt-div-app.5a3eb96a10b94efb9d19f2ff7137e7e5\",\n      country: \"DE\",\n      language: \"de_DE\",\n      translation: [\n        {\n          language: \"en\",\n          resource: {\n            confirm: \"confirm\"\n          }\n        },\n        {\n          language: \"de\",\n          resource: {\n            confirm: \"bestÃ¤tigen\"\n          }\n        }\n      ],\n      paymentMethodsConfiguration: [\n        {\n          code: \"PAYPAL\",\n          style: {\n            size: \"small\",\n            color: \"gold\",\n            shape: \"rect\",\n            label: \"checkout\"\n          }\n        }\n      ]\n    },\n    createTransactionDetails: function(requestData) {\n      return {\n        transactionId: \"tr-\" + new Date().getTime(),\n        country: \"DE\",\n        providerRequest: requestData,\n        payment: {\n          amount: 20,\n          currency: \"EUR\",\n          reference: \"Payment #1\",\n          longReference: {\n            essential: \"Thank you for your purchase!\"\n          }\n        },\n        products: [\n          {\n            name: \"Ledger Nano S\",\n            amount: 20\n          }\n        ]\n      };\n    },\n    customFunctions: {}\n  },\n  integration: {\n    configuration: {\n      baseURL: \"https://api.integration.oscato.com/pci/v1/express\",\n      clientId: \"v1.opt-div-app.51d30325cb0d4b5bb9cce2e7e6b15b1f\",\n      country: \"DE\",\n      language: \"de_DE\",\n      translation: [\n        {\n          language: \"en\",\n          resource: {\n            confirm: \"confirm\"\n          }\n        },\n        {\n          language: \"de\",\n          resource: {\n            confirm: \"bestÃ¤tigen\"\n          }\n        }\n      ],\n      paymentMethodsConfiguration: [\n        {\n          code: \"PAYPAL\",\n          style: {\n            size: \"small\",\n            color: \"gold\",\n            shape: \"rect\",\n            label: \"checkout\"\n          }\n        }\n      ]\n    },\n    createTransactionDetails: function(requestData) {\n      return {\n        transactionId: \"tr-\" + new Date().getTime(),\n        country: \"DE\",\n        providerRequest: requestData,\n        payment: {\n          amount: 20,\n          currency: \"EUR\",\n          reference: \"Payment #1\",\n          longReference: {\n            essential: \"Thank you for your purchase!\"\n          }\n        },\n        products: [\n          {\n            name: \"Ledger Nano S\",\n            amount: 20\n          }\n        ]\n      };\n    },\n    customFunctions: {}\n  }\n};\nfunction getEnv(queryStringEnv) {\n  if (queryStringEnv) {\n    return queryStringEnv;\n  }\n  if (window.location.hostname === \"localhost\") {\n    return \"local\";\n  }\n  return \"integration\";\n}\n\nexport default function getAttributes() {\n  var urlParams = new URLSearchParams(window.location.search);\n  var env = getEnv(urlParams.get(\"env\"));\n\n  return attributes[env] || null;\n}\n","export const attributes = {\n    local: {\n        MERCHANT: {\n            USER: \"555\",\n            TOKEN: \"b348k9ho52e57lmksjl3um438k1e50cde1tbmlekrd\",\n        },\n    },\n    integration: {\n        MERCHANT: {\n            USER: \"555\",\n            TOKEN: \"b348k9ho52e57lmksjl3um438k1e50cde1tbmlekrd\",\n        },\n    },\n};\n","import { attributes } from \"../server/constants\";\n\nexport const getQueryStringFromObject = (parameters) => {\n    const queryString = parameters.reduce(\n        (acc, current) => `${acc}${encodeURIComponent(current.name)}=${encodeURIComponent(current.value)}&`,\n        \"\"\n    );\n    return queryString.slice(0, -1);\n};\n\n/**\n * This function returns longId from query params\n * @returns {String} longId\n */\nexport const getLongId = () => {\n    let params = new URLSearchParams(window.location.search);\n\n    return params.get(\"longId\");\n};\n\n/**\n * This function returns the object which contain\n * merchant user and token according to whether its\n * localhost or integration\n * @returns {Object} MERCHANT\n */\nconst getMerchantToken = () => {\n    if (window.location.hostname === \"localhost\") {\n        return attributes.local.MERCHANT;\n    }\n    return attributes.integration.MERCHANT;\n};\n\n/**\n * This function returns encrypted authorization token\n * @returns {String} authorization\n */\nexport const getAuthorization = () => {\n    const MERCHANT = getMerchantToken();\n    return `Basic ${btoa(`${MERCHANT.USER}:${MERCHANT.TOKEN}`)}`;\n};","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ExpressCheckout from \"express-checkout\";\nimport BASEURL from \"./const\";\nimport getAttributes from \"../configuration/spa\";\nimport { getQueryStringFromObject } from \"../utils\";\n\nfunction Checkout() {\n  let history = useHistory();\n  const attributes = getAttributes();\n\n  const onProceed = ({ step, dispatch, preset }) => {\n    if (step === \"update\") {\n      const { parameters } = preset.redirect;\n      history.push(\n        BASEURL + \"/summary?\" + getQueryStringFromObject(parameters)\n      );\n    }\n    if (step === \"cancel\") {\n      const { parameters } = preset.redirect;\n      history.push(\n        BASEURL + \"/checkout?\" + getQueryStringFromObject(parameters)\n      );\n    }\n  };\n  const onAbort = ({ step, dispatch, preset }) => {\n    const { parameters } = preset.redirect;\n    history.push(BASEURL + \"/checkout?\" + getQueryStringFromObject(parameters));\n  };\n\n  // this is used when you click to close the pop up\n  const onCustomerAbort = ({ step, dispatch, preset }) => {\n    const { parameters } = preset.redirect;\n    history.push(BASEURL + \"/checkout?\" + getQueryStringFromObject(parameters));\n  };\n\n  return (\n    <ExpressCheckout\n      configuration={attributes.configuration}\n      createTransactionDetails={attributes.createTransactionDetails}\n      customFunctions={{ onProceed, onAbort, onCustomerAbort }}\n      mode={null}\n      longId={null}\n    />\n  );\n}\nexport default Checkout;\n","import queryString from \"query-string\";\n\n/**\n * Fetch Data using fetch and format the response\n * @param {String} url\n * @param {Object} options\n * @returns {Promise}\n */\nexport const fetchData = async (url, options) => {\n    try {\n        const fetchResult = await fetch(url, options);\n        const data = await handleResponse(fetchResult);\n        return {\n            response: {\n                ok: true,\n            },\n            data,\n        };\n    } catch (error) {\n        return {\n            response: {\n                ok: false,\n            },\n            error: {\n                message: error.message,\n                status: error.status,\n                statusText: error.statusText,\n            },\n        };\n    }\n};\n\n/**\n * Handle JSON Response\n * @param {Object} response\n * @returns {Promise.reject} includes message as json\n */\nasync function handleJSONResponse(response) {\n    return response.json().then((json) => {\n        if (response.ok) {\n            return json;\n        }\n        return Promise.reject({\n            message: json,\n            status: response.status,\n            statusText: response.statusText,\n        });\n    });\n}\n\n/**\n * Handle Text Response\n * @param {Object} response\n * @returns {Promise.reject} includes message as text\n */\nfunction handleTextResponse(response) {\n    return response.text().then((text) => {\n        if (response.ok) {\n            return text;\n        }\n        return Promise.reject({\n            message: text,\n            status: response.status,\n            statusText: response.statusText,\n        });\n    });\n}\n\n/**\n * Handle Response\n * @param {Object} response\n * @returns {Promise.reject} includes message by type OR {Error}\n */\nfunction handleResponse(response) {\n    const contentType = response.headers.get(\"content-type\");\n    if (\n        contentType?.includes(\"application/json\") ||\n        contentType?.includes(\"application/vnd.optile.payment.enterprise-v1-extensible+json;charset=UTF-8\")\n    ) {\n        return handleJSONResponse(response);\n    }\n    if (contentType?.includes(\"text/plain\") || contentType?.includes(\"text/html\")) {\n        return handleTextResponse(response);\n    }\n    throw new Error(`Sorry, content-type ${contentType} not supported`);\n}\n\n/**\n * Send Data\n * @param {Object} params\n * @param {String} params.url\n * @param {String} params.method\n * @param {Object} params.body\n * @returns {Promise}\n */\nexport const sendData = ({ url, method, body, headers }) =>\n    fetchData(url, {\n        method,\n        mode: \"cors\",\n        cache: \"default\",\n        redirect: \"follow\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n            ...headers,\n        },\n        body: body ? JSON.stringify(body) : null,\n    });\n\n/**\n * Send Data With Params\n * pass querystring to url for fetch\n * @param {Object} params\n * @param {String} params.baseURL\n * @param {String} params.method\n * @param {Object} params.params\n * @param {Object} params.body\n * @returns {Promise}\n */\nexport const sendDataWithParams = ({ baseURL, method, params, body }) => {\n    const { url, query } = queryString.parseUrl(baseURL);\n    const newQueryString = queryString.stringify({ ...query, ...params });\n    const newURL = newQueryString ? `${url}?${newQueryString}` : url;\n    return fetchData(newURL, {\n        method,\n        mode: \"cors\",\n        cache: \"default\",\n        redirect: \"follow\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        },\n        body: body ? JSON.stringify(body) : null,\n    });\n};\n","import { fetchData } from \"../network\";\nimport { getLongId, getAuthorization } from \"../../utils\";\nimport getAttributes from \"../../configuration/spa\";\n\nconst getPresetLink = (longId) => {\n    const baseURL = getAttributes()?.configuration?.baseURL;\n    return `${baseURL?.replace(\"pci/v1/express\", \"api/presets\")}/${longId}`;\n};\n\nexport const getExpressPreset = async (callback, onlyGetExpressPreset) => {\n    const longId = getLongId();\n    const baseURL = getPresetLink(longId);\n    const Authorization = getAuthorization();\n    const options = {\n        method: \"GET\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization,\n        },\n    };\n    const { response, data } = await fetchData(baseURL, options);\n    if (onlyGetExpressPreset) {\n        callback({\n            address: data?.customerCollectedDetails?.addresses?.shipping,\n            network: data?.network,\n        });\n        return;\n    }\n    if (response?.ok && data?.links?.charge) {\n        callback(data.links.charge);\n    } else callback(\"ERROR\");\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ExpressCheckout from \"express-checkout\";\nimport BASEURL from \"./const\";\nimport getAttributes from \"../configuration/spa\";\nimport { getQueryStringFromObject, getLongId } from \"../utils\";\nimport { getExpressPreset } from \"../server/getExpressPreset\";\nimport \"./Summary.css\";\n\nfunction Summary() {\n    let history = useHistory();\n    const attributes = getAttributes();\n    const [paymentData, setPaymentData] = useState({});\n\n    const onProceed = ({ step, dispatch, preset }) => {\n        if (step === \"confirm\") {\n            const { parameters } = preset.redirect;\n            history.push(BASEURL + \"/thankyou?\" + getQueryStringFromObject(parameters));\n        }\n    };\n    const onAbort = ({ step, dispatch, preset }) => {\n        if (step === \"confirm\") {\n            const { parameters } = preset.redirect;\n            history.push(BASEURL + \"/cancel?\" + getQueryStringFromObject(parameters));\n        }\n    };\n    const longId = getLongId();\n    useEffect(() => {\n        getExpressPreset(setPaymentData, true);\n    }, []);\n    const address = paymentData?.address;\n    const name = paymentData?.address?.name;\n    const network = paymentData?.network;\n\n    return (\n        <div className=\"summaryContainer\">\n            <div className=\"detailsContainer\">\n                {!!address && (\n                    <div className=\"details\">\n                        <div className=\"label\">Shipping Address:</div>\n                        <div>{`${name?.firstName} ${name?.lastName}`}</div>\n                        <div>{address?.street}</div>\n                        <div>{`${address?.city} ${address?.country}`}</div>\n                        <div>{address?.zip}</div>\n                    </div>\n                )}\n                {!!network && (\n                    <div className=\"details\">\n                        <div className=\"label\">Billing Information:</div>\n                        {paymentData?.network}\n                    </div>\n                )}\n            </div>\n            <ExpressCheckout {...attributes} mode=\"Summary\" longId={longId} customFunctions={{ onProceed, onAbort }} />\n        </div>\n    );\n}\n\nexport default Summary;\n","import React from \"react\";\nimport { withRouter } from \"react-router\";\n\nfunction Cancel({location}) {\n  return <div>Payment failed, please retry again!</div>;\n}\nexport default withRouter(Cancel);\n","import React, { useState, useEffect } from \"react\";\nimport { getExpressPreset } from \"../server/getExpressPreset\";\nimport { charge } from \"../server/charge\";\n\nconst getTemplate = (status) => {\n    switch (status) {\n        case \"CHARGED\":\n            return <div>Payment is successfull</div>;\n        case \"EXPIRED\":\n            return <div>The session is expired</div>;\n        case \"ERROR\":\n            return <div>Payment failed!</div>;\n        default:\n            return <div>Processing...</div>;\n    }\n};\n\nconst Thankyou = () => {\n    const [status, setStatus] = useState(\"PROCESSING\");\n    const [link, setLink] = useState(\"\");\n    useEffect(() => {\n        getExpressPreset(setLink);\n    }, []);\n    useEffect(() => {\n        if (!link) return;\n        if (link === \"EXPIRED\" || link === \"ERROR\") {\n            setStatus(link);\n        } else {\n            charge(link, setStatus);\n        }\n    }, [link]);\n    return <div>{getTemplate(status)}</div>;\n};\n\nexport default Thankyou;\n","import { sendData } from \"../network\";\nimport { getAuthorization } from \"../../utils\";\n\nexport const charge = async (url, callback) => {\n    const response = await sendData({\n        url,\n        method: \"POST\",\n        body: {},\n        headers: {\n            Authorization: getAuthorization(),\n        },\n    });\n    if (response?.data?.status?.code === \"charged\") {\n        callback(\"CHARGED\");\n    } else callback(\"ERROR\");\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport BASEURL from \"./pages/const\";\nimport { Home, Checkout, Summary, Thankyou, Cancel } from \"./pages\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Link to={BASEURL + \"/\"}>Home</Link>\n      </div>\n      <br />\n      <br />\n      <div align=\"center\">\n        <Switch>\n          <Route path={BASEURL + \"/checkout\"}>\n            <Checkout />\n          </Route>\n          <Route path={BASEURL + \"/summary\"}>\n            <Summary />\n          </Route>\n          <Route path={BASEURL + \"/thankyou\"}>\n            <Thankyou />\n          </Route>\n          <Route path={BASEURL + \"/cancel\"}>\n            <Cancel />\n          </Route>\n          <Route path={BASEURL + \"/\"}>\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}